// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version (devel) DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/discord-gophers/goapi-gen/examples/petstore-expanded/types"
	customTypes "github.com/discord-gophers/goapi-gen/examples/petstore-expanded/types"
	"github.com/discord-gophers/goapi-gen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
)

// Error defines model for Error.
type Error struct {
	// Error message
	Message string `json:"message"`
}

// NewPet defines model for NewPet.
type NewPet struct {
	// Name of the pet
	Name types.CustomString `json:"name"`

	// Type of the pet
	Tag *string `json:"tag,omitempty"`
}

// Pet defines model for Pet.
type Pet struct {
	// Embedded struct due to allOf(#/components/schemas/NewPet)
	NewPet `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Unique id of the pet
	ID int64 `json:"id"`
}

// FindPetsParams defines parameters for FindPets.
type FindPetsParams struct {
	// tags to filter by
	Tags []string `json:"tags,omitempty"`

	// maximum number of results to return
	Limit *int32 `json:"limit,omitempty"`
}

// AddPetJSONBody defines parameters for AddPet.
type AddPetJSONBody NewPet

// AddPetJSONRequestBody defines body for AddPet for application/json ContentType.
type AddPetJSONRequestBody AddPetJSONBody

// Bind implements render.Binder.
func (AddPetJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
type Response struct {
	body        interface{}
	statusCode  int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.statusCode)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(statusCode int) *Response {
	resp.statusCode = statusCode
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// FindPetsJSON200Response is a constructor method for a FindPets response.
// A *Response is returned with the configured status code and content type from the spec.
func FindPetsJSON200Response(body []Pet) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// FindPetsJSONDefaultResponse is a constructor method for a FindPets response.
// A *Response is returned with the configured status code and content type from the spec.
func FindPetsJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// AddPetJSON201Response is a constructor method for a AddPet response.
// A *Response is returned with the configured status code and content type from the spec.
func AddPetJSON201Response(body Pet) *Response {
	return &Response{
		body:        body,
		statusCode:  201,
		contentType: "application/json",
	}
}

// AddPetJSONDefaultResponse is a constructor method for a AddPet response.
// A *Response is returned with the configured status code and content type from the spec.
func AddPetJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// DeletePetJSONDefaultResponse is a constructor method for a DeletePet response.
// A *Response is returned with the configured status code and content type from the spec.
func DeletePetJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// FindPetByIDJSON200Response is a constructor method for a FindPetByID response.
// A *Response is returned with the configured status code and content type from the spec.
func FindPetByIDJSON200Response(body Pet) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// FindPetByIDJSONDefaultResponse is a constructor method for a FindPetByID response.
// A *Response is returned with the configured status code and content type from the spec.
func FindPetByIDJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all pets
	// (GET /pets)
	FindPets(w http.ResponseWriter, r *http.Request, params FindPetsParams)
	// Creates a new pet
	// (POST /pets)
	AddPet(w http.ResponseWriter, r *http.Request)
	// Deletes a pet by ID
	// (DELETE /pets/{id})
	DeletePet(w http.ResponseWriter, r *http.Request, id customTypes.CustomInt)
	// Returns a pet by ID
	// (GET /pets/{id})
	FindPetByID(w http.ResponseWriter, r *http.Request, id int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	Middlewares      map[string]func(http.Handler) http.Handler
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// FindPets operation middleware
func (siw *ServerInterfaceWrapper) FindPets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams

	// ------------- Optional query parameter "tags" -------------

	if err := runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags); err != nil {
		err = fmt.Errorf("invalid format for parameter tags: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	if err := runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit); err != nil {
		err = fmt.Errorf("invalid format for parameter limit: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPets(w, r, params)
	})

	handler(w, r.WithContext(ctx))
}

// AddPet operation middleware
func (siw *ServerInterfaceWrapper) AddPet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddPet(w, r)
	})

	handler(w, r.WithContext(ctx))
}

// DeletePet operation middleware
func (siw *ServerInterfaceWrapper) DeletePet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id customTypes.CustomInt

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		err = fmt.Errorf("invalid format for parameter id: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePet(w, r, id)
	})

	handler(w, r.WithContext(ctx))
}

// FindPetByID operation middleware
func (siw *ServerInterfaceWrapper) FindPetByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id int64

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		err = fmt.Errorf("invalid format for parameter id: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPetByID(w, r, id)
	})

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	error
}
type UnmarshalingParamError struct {
	error
}
type RequiredParamError struct {
	error
}
type RequiredHeaderError struct {
	error
}
type InvalidParamFormatError struct {
	error
}
type TooManyValuesForParamError struct {
	error
}

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      map[string]func(http.Handler) http.Handler
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:     "/",
		BaseRouter:  chi.NewRouter(),
		Middlewares: make(map[string]func(http.Handler) http.Handler),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		Middlewares:      options.Middlewares,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Get("/pets", wrapper.FindPets)
		r.Post("/pets", wrapper.AddPet)
		r.Delete("/pets/{id}", wrapper.DeletePet)
		r.Get("/pets/{id}", wrapper.FindPetByID)

	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithMiddleware(key string, middleware func(http.Handler) http.Handler) ServerOption {
	return func(s *ServerOptions) {
		s.Middlewares[key] = middleware
	}
}

func WithMiddlewares(middlewares map[string]func(http.Handler) http.Handler) ServerOption {
	return func(s *ServerOptions) {
		s.Middlewares = middlewares
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
