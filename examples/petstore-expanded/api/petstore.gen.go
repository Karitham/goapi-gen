// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version (devel) DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	customTypes "github.com/discord-gophers/goapi-gen/examples/petstore-expanded/types"
	"github.com/discord-gophers/goapi-gen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
)

// Error defines model for Error.
type Error struct {
	// Error message
	Message string `json:"message"`
}

// NewPet defines model for NewPet.
type NewPet struct {
	// Name of the pet
	Name customTypes.CustomString `json:"name"`

	// Type of the pet
	Tag *string `json:"tag,omitempty"`
}

// Pet defines model for Pet.
type Pet struct {
	// Embedded struct due to allOf(#/components/schemas/NewPet)
	NewPet `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Unique id of the pet
	ID int64 `json:"id"`
}

// FindPetsParams defines parameters for FindPets.
type FindPetsParams struct {
	// tags to filter by
	Tags []string `json:"tags,omitempty"`

	// maximum number of results to return
	Limit *int32 `json:"limit,omitempty"`
}

// AddPetJSONBody defines parameters for AddPet.
type AddPetJSONBody NewPet

// AddPetJSONRequestBody defines body for AddPet for application/json ContentType.
type AddPetJSONRequestBody AddPetJSONBody

// Bind implements render.Binder.
func (AddPetJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
type Response struct {
	body        interface{}
	statusCode  int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.statusCode)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(statusCode int) *Response {
	resp.statusCode = statusCode
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// FindPetsJSON200Response is a constructor method for a FindPets response.
// A *Response is returned with the configured status code and content type from the spec.
func FindPetsJSON200Response(body []Pet) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// FindPetsJSONDefaultResponse is a constructor method for a FindPets response.
// A *Response is returned with the configured status code and content type from the spec.
func FindPetsJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// AddPetJSON201Response is a constructor method for a AddPet response.
// A *Response is returned with the configured status code and content type from the spec.
func AddPetJSON201Response(body Pet) *Response {
	return &Response{
		body:        body,
		statusCode:  201,
		contentType: "application/json",
	}
}

// AddPetJSONDefaultResponse is a constructor method for a AddPet response.
// A *Response is returned with the configured status code and content type from the spec.
func AddPetJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// DeletePetJSONDefaultResponse is a constructor method for a DeletePet response.
// A *Response is returned with the configured status code and content type from the spec.
func DeletePetJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// FindPetByIDJSON200Response is a constructor method for a FindPetByID response.
// A *Response is returned with the configured status code and content type from the spec.
func FindPetByIDJSON200Response(body Pet) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// FindPetByIDJSONDefaultResponse is a constructor method for a FindPetByID response.
// A *Response is returned with the configured status code and content type from the spec.
func FindPetByIDJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all pets
	// (GET /pets)
	FindPets(w http.ResponseWriter, r *http.Request, params FindPetsParams)
	// Creates a new pet
	// (POST /pets)
	AddPet(w http.ResponseWriter, r *http.Request)
	// Deletes a pet by ID
	// (DELETE /pets/{id})
	DeletePet(w http.ResponseWriter, r *http.Request, id int64)
	// Returns a pet by ID
	// (GET /pets/{id})
	FindPetByID(w http.ResponseWriter, r *http.Request, id int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	Middlewares      map[string]func(http.Handler) http.Handler
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// FindPets operation middleware
func (siw *ServerInterfaceWrapper) FindPets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams

	// ------------- Optional query parameter "tags" -------------

	if err := runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags); err != nil {
		err = fmt.Errorf("invalid format for parameter tags: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	if err := runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit); err != nil {
		err = fmt.Errorf("invalid format for parameter limit: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPets(w, r, params)
	})

	handler(w, r.WithContext(ctx))
}

// AddPet operation middleware
func (siw *ServerInterfaceWrapper) AddPet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddPet(w, r)
	})

	handler(w, r.WithContext(ctx))
}

// DeletePet operation middleware
func (siw *ServerInterfaceWrapper) DeletePet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id int64

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		err = fmt.Errorf("invalid format for parameter id: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePet(w, r, id)
	})

	handler(w, r.WithContext(ctx))
}

// FindPetByID operation middleware
func (siw *ServerInterfaceWrapper) FindPetByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id int64

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		err = fmt.Errorf("invalid format for parameter id: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPetByID(w, r, id)
	})

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	error
}
type UnmarshalingParamError struct {
	error
}
type RequiredParamError struct {
	error
}
type RequiredHeaderError struct {
	error
}
type InvalidParamFormatError struct {
	error
}
type TooManyValuesForParamError struct {
	error
}

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      map[string]func(http.Handler) http.Handler
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:     "/",
		BaseRouter:  chi.NewRouter(),
		Middlewares: make(map[string]func(http.Handler) http.Handler),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		Middlewares:      options.Middlewares,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Get("/pets", wrapper.FindPets)
		r.Post("/pets", wrapper.AddPet)
		r.Delete("/pets/{id}", wrapper.DeletePet)
		r.Get("/pets/{id}", wrapper.FindPetByID)

	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithMiddleware(key string, middleware func(http.Handler) http.Handler) ServerOption {
	return func(s *ServerOptions) {
		s.Middlewares[key] = middleware
	}
}

func WithMiddlewares(middlewares map[string]func(http.Handler) http.Handler) ServerOption {
	return func(s *ServerOptions) {
		s.Middlewares = middlewares
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"r+T9ycVWb6e7T7v/BAAA//+DIasWnhIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
