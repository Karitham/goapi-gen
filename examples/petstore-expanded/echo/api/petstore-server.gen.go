// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all pets
	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error
	// Creates a new pet
	// (POST /pets)
	AddPet(ctx echo.Context) error
	// Deletes a pet by ID
	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error
	// Returns a pet by ID
	// (GET /pets/{id})
	FindPetByID(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetByID(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/pets", wrapper.FindPets)
	router.POST(baseURL+"/pets", wrapper.AddPet)
	router.DELETE(baseURL+"/pets/:id", wrapper.DeletePet)
	router.GET(baseURL+"/pets/:id", wrapper.FindPetByID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
