// Doer performs HTTP requests.
// The standard http.Client implements this interface.
type Doer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://example.com for example. This can contain a path relative
	// to the server, such as https://example.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	BaseURL string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	client Doer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	reqEditors []func(req *http.Request) error
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		BaseURL: server,
		client:  &http.Client{},
	}

	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}

	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.BaseURL, "/") {
		client.BaseURL += "/"
	}

	return &client, nil
}

// WithDoer allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithDoer(doer Doer) ClientOption {
	return func(c *Client) error {
		c.client = doer
		return nil
	}
}

// WithEditors allows setting up request editors, which are used to modify
func WithEditors(fns ...func(req *http.Request) error) ClientOption {
	return func(c *Client) error {
		c.reqEditors = append(c.reqEditors, fns...)
		return nil
	}
}

type ReqResponse struct {
	*http.Response
}