{{ range . -}}
// {{ .OperationID }} makes the request to the API endpoint.
func (c *Client) {{template "method-signature" .}} {

	
	{{ if .QueryParams }}
		queryParams := make(map[string]string)
		{{- range .QueryParams }}
			{{- if .IndirectOptional  }}
				if params.{{- .GoVariableName | ucFirst -}} != nil {
					queryParams["{{ .ParamName }}"] = *params.{{- .GoVariableName | ucFirst -}}
				}
			{{- else }}
				queryParams["{{ .ParamName }}"] = params.{{- .GoVariableName | ucFirst -}}
			{{- end }}
		{{- end }}
	{{- end }}

	// Create the request
	{{/* Yes this is absolutely painful, :cry: */ -}}
	req, err := http.NewRequestWithContext(
		ctx,
		"{{ .Method }}",
		{{- if or .PathParams .QueryParams }}


			buildURL(
				c.BaseURL,

				{{- if .PathParams }}
				map[string]string{
					{{- range .PathParams }}
						"{{ .ParamName }}": params.{{- .GoVariableName | ucFirst -}},
					{{ end }}
				},
				{{- else }}
					nil,
				{{- end }}

				{{- if .QueryParams }}
					queryParams,
				{{- else }}
					nil,
				{{- end }}
			),
		{{- else }}
			c.BaseURL,
		{{- end }}
		{{- if .HasBody }}
			params.Body,
		{{- else }}
			nil,	
		{{- end }}
	)
	if err != nil {
		return {{ if .HasBody }} nil, {{- end -}}
		fmt.Errorf("failed to build request: %w", err)
	}

	{{- if .HeaderParams -}}
	// Set the headers

	{{ range .HeaderParams }}
		{{- if .IndirectOptional }}
			req.Header.Set("{{.ParamName}}", *params.{{- .GoVariableName | ucFirst -}})
		{{- else }}
			req.Header.Set("{{.ParamName}}", params.{{- .GoVariableName | ucFirst -}})
		{{- end}}
	{{- end }}

	{{- end }}

	{{- if .CookieParams -}}

	// Set the cookies
	{{- range .CookieParams }}
		req.AddCookie(params.{{ .GoVariableName | ucFirst }})
	{{- end }}

	{{- end }}

	// Apply any request editors
	for _, fn := range c.reqEditors {
		if err := fn(req); err != nil {
			return {{ if .HasBody }} nil, {{- end -}}
			fmt.Errorf("failed to apply request editor: %w", err)
		}
	}
	
	// Do the request
	{{ if .HasBody -}} resp {{- else -}} _ {{- end -}}, errDo := c.client.Do(req)
	if errDo != nil {
		return {{ if .HasBody }} &ReqResponse{
			Response: resp,
		},
		{{- end -}}
		fmt.Errorf("failed to send request: %w", errDo)
	}

	{{ if .HasBody -}}
	// Bind the response body
	if err := ReqDecoder(resp, respBody); err != nil {
		return &ReqResponse{
			Response: resp,
		},
		fmt.Errorf("failed to bind response body: %w", err)
	}
	{{- end }}

	return {{ if .HasBody -}} &ReqResponse{
			Response: resp,
		},
		{{- end -}}
		nil
}
{{ end }}
