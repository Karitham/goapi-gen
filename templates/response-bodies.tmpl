{{if .}}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
// It may also be instantiated directly, for the purpose of responding with a single status code.
type Response struct {
    Body interface{}
    Code int
    ContentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
    w.Header().Set("Content-Type", resp.ContentType)
    render.Status(r, resp.Code)
    return nil
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
    return json.Marshal(resp.Body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.Body)
}

{{end}}

{{range .}}{{$opid := .OperationID}}
{{range getResponseTypeDefinitions .}}

// {{$opid | ucFirst}}{{.TypeName | title}}Response is a constructor method for a {{$opid | ucFirst}} response.
// A *Response is returned with the configured status code and content type from the spec.
func {{$opid | ucFirst}}{{.TypeName | title}}Response(body {{.Schema.TypeDecl}}) *Response {
    return &Response{
            Body: body,
            Code: {{.ResponseName | statusCode}},
            ContentType: "{{.ContentTypeName}}",
    }
}

{{end}}
{{end}}
