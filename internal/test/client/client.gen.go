// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version (devel) DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
)

const (
	OpenIDScopes = "OpenId.Scopes"
)

// SchemaObject defines model for SchemaObject.
type SchemaObject struct {
	FirstName string `json:"firstName"`
	Role      string `json:"role"`
}

// PostBothJSONBody defines parameters for PostBoth.
type PostBothJSONBody SchemaObject

// PostJSONJSONBody defines parameters for PostJSON.
type PostJSONJSONBody SchemaObject

// PostBothJSONRequestBody defines body for PostBoth for application/json ContentType.
type PostBothJSONRequestBody PostBothJSONBody

// Bind implements render.Binder.
func (PostBothJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// PostJSONJSONRequestBody defines body for PostJSON for application/json ContentType.
type PostJSONJSONRequestBody PostJSONJSONBody

// Bind implements render.Binder.
func (PostJSONJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
type Response struct {
	body        interface{}
	statusCode  int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.statusCode)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(statusCode int) *Response {
	resp.statusCode = statusCode
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// ClientInterface is implemented by Client
type ClientInterface interface {
	// PostBoth makes the request to the API endpoint.
	PostBoth(ctx context.Context, respBody interface{}, params PostBothClientParams, opts ...func(*http.Request) error) (*ReqResponse, error)
	// GetBoth makes the request to the API endpoint.
	GetBoth(ctx context.Context, opts ...func(*http.Request) error) error
	// PostJSON makes the request to the API endpoint.
	PostJSON(ctx context.Context, respBody interface{}, params PostJSONClientParams, opts ...func(*http.Request) error) (*ReqResponse, error)
	// GetJSON makes the request to the API endpoint.
	GetJSON(ctx context.Context, opts ...func(*http.Request) error) error
	// PostOther makes the request to the API endpoint.
	PostOther(ctx context.Context, respBody interface{}, params PostOtherClientParams, opts ...func(*http.Request) error) (*ReqResponse, error)
	// GetOther makes the request to the API endpoint.
	GetOther(ctx context.Context, opts ...func(*http.Request) error) error
	// GetJSONWithTrailingSlash makes the request to the API endpoint.
	GetJSONWithTrailingSlash(ctx context.Context, opts ...func(*http.Request) error) error
}

// Doer performs HTTP requests.
// The standard http.Client implements this interface.
type Doer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://example.com for example. This can contain a path relative
	// to the server, such as https://example.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	BaseURL string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	client Doer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	reqEditors []func(req *http.Request) error
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		BaseURL: server,
		client:  &http.Client{},
	}

	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}

	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.BaseURL, "/") {
		client.BaseURL += "/"
	}

	return &client, nil
}

// WithDoer allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithDoer(doer Doer) ClientOption {
	return func(c *Client) error {
		c.client = doer
		return nil
	}
}

// WithEditors allows setting up request editors, which are used to modify
func WithEditors(fns ...func(req *http.Request) error) ClientOption {
	return func(c *Client) error {
		c.reqEditors = append(c.reqEditors, fns...)
		return nil
	}
}

type ReqResponse struct {
	*http.Response
}

// Decode is a package-level variable set to our default Decoder. We do this
// because it allows you to set Decode to another function with the
// same function signature, while also utilizing the Decoder() function
// itself. Effectively, allowing you to easily add your own logic to the package
// defaults. For example, maybe you want to impose a limit on the number of
// bytes allowed to be read from the request body.
var ReqDecoder = defaultDecoder

// defaultDecoder detects the correct decoder for use on an HTTP request and
// marshals into a given interface.
func defaultDecoder(resp *http.Response, v interface{}) error {
	var err error

	switch render.GetContentType(resp.Header.Get("Content-Type")) {
	case render.ContentTypeJSON:
		err = render.DecodeJSON(resp.Body, v)
	case render.ContentTypeXML:
		err = render.DecodeXML(resp.Body, v)
	default:
		err = errors.New("defaultDecoder: unable to automatically decode the request content type")
	}

	return err
}

// We generate a new type for each client function such that we have all required in this parameter.
// Having a parameter like this is good because we don't break the function signature if things change inside.
// This is also cleaner than having all parameters as function parameters.
// The only issue is that it easily gets quite big

type PostBothClientParams struct {
	Body io.Reader
}

type PostJSONClientParams struct {
	Body io.Reader
}

type PostOtherClientParams struct {
}

func buildURL(baseURL string, pathParams map[string]string, queryParams map[string]string) string {
	u, err := url.Parse(baseURL)
	if err != nil {
		panic(err)
	}

	// add path parameters
	for name, value := range pathParams {
		u.Path = strings.Replace(u.Path, "{"+name+"}", value, 1)
	}

	// add query parameters
	q := u.Query()
	for key, value := range queryParams {
		q.Set(key, value)
	}
	u.RawQuery = q.Encode()

	return u.String()
}

// PostBoth makes the request to the API endpoint.
func (c *Client) PostBoth(ctx context.Context, respBody interface{}, params PostBothClientParams, opts ...func(*http.Request) error) (*ReqResponse, error) {

	// Create the request
	req, err := http.NewRequestWithContext(
		ctx,
		"POST",
		c.BaseURL,
		params.Body,
	)
	if err != nil {
		return nil, fmt.Errorf("failed to build request: %w", err)
	}

	// Apply any request editors
	for _, fn := range c.reqEditors {
		if err := fn(req); err != nil {
			return nil, fmt.Errorf("failed to apply request editor: %w", err)
		}
	}

	// Do the request
	resp, errDo := c.client.Do(req)
	if errDo != nil {
		return &ReqResponse{
			Response: resp,
		}, fmt.Errorf("failed to send request: %w", errDo)
	}

	// Bind the response body
	if err := ReqDecoder(resp, respBody); err != nil {
		return &ReqResponse{
				Response: resp,
			},
			fmt.Errorf("failed to bind response body: %w", err)
	}

	return &ReqResponse{
		Response: resp,
	}, nil
}

// GetBoth makes the request to the API endpoint.
func (c *Client) GetBoth(ctx context.Context, opts ...func(*http.Request) error) error {

	// Create the request
	req, err := http.NewRequestWithContext(
		ctx,
		"GET",
		c.BaseURL,
		nil,
	)
	if err != nil {
		return fmt.Errorf("failed to build request: %w", err)
	}

	// Apply any request editors
	for _, fn := range c.reqEditors {
		if err := fn(req); err != nil {
			return fmt.Errorf("failed to apply request editor: %w", err)
		}
	}

	// Do the request
	_, errDo := c.client.Do(req)
	if errDo != nil {
		return fmt.Errorf("failed to send request: %w", errDo)
	}

	return nil
}

// PostJSON makes the request to the API endpoint.
func (c *Client) PostJSON(ctx context.Context, respBody interface{}, params PostJSONClientParams, opts ...func(*http.Request) error) (*ReqResponse, error) {

	// Create the request
	req, err := http.NewRequestWithContext(
		ctx,
		"POST",
		c.BaseURL,
		params.Body,
	)
	if err != nil {
		return nil, fmt.Errorf("failed to build request: %w", err)
	}

	// Apply any request editors
	for _, fn := range c.reqEditors {
		if err := fn(req); err != nil {
			return nil, fmt.Errorf("failed to apply request editor: %w", err)
		}
	}

	// Do the request
	resp, errDo := c.client.Do(req)
	if errDo != nil {
		return &ReqResponse{
			Response: resp,
		}, fmt.Errorf("failed to send request: %w", errDo)
	}

	// Bind the response body
	if err := ReqDecoder(resp, respBody); err != nil {
		return &ReqResponse{
				Response: resp,
			},
			fmt.Errorf("failed to bind response body: %w", err)
	}

	return &ReqResponse{
		Response: resp,
	}, nil
}

// GetJSON makes the request to the API endpoint.
func (c *Client) GetJSON(ctx context.Context, opts ...func(*http.Request) error) error {

	// Create the request
	req, err := http.NewRequestWithContext(
		ctx,
		"GET",
		c.BaseURL,
		nil,
	)
	if err != nil {
		return fmt.Errorf("failed to build request: %w", err)
	}

	// Apply any request editors
	for _, fn := range c.reqEditors {
		if err := fn(req); err != nil {
			return fmt.Errorf("failed to apply request editor: %w", err)
		}
	}

	// Do the request
	_, errDo := c.client.Do(req)
	if errDo != nil {
		return fmt.Errorf("failed to send request: %w", errDo)
	}

	return nil
}

// PostOther makes the request to the API endpoint.
func (c *Client) PostOther(ctx context.Context, respBody interface{}, params PostOtherClientParams, opts ...func(*http.Request) error) (*ReqResponse, error) {

	// Create the request
	req, err := http.NewRequestWithContext(
		ctx,
		"POST",
		c.BaseURL,
		params.Body,
	)
	if err != nil {
		return nil, fmt.Errorf("failed to build request: %w", err)
	}

	// Apply any request editors
	for _, fn := range c.reqEditors {
		if err := fn(req); err != nil {
			return nil, fmt.Errorf("failed to apply request editor: %w", err)
		}
	}

	// Do the request
	resp, errDo := c.client.Do(req)
	if errDo != nil {
		return &ReqResponse{
			Response: resp,
		}, fmt.Errorf("failed to send request: %w", errDo)
	}

	// Bind the response body
	if err := ReqDecoder(resp, respBody); err != nil {
		return &ReqResponse{
				Response: resp,
			},
			fmt.Errorf("failed to bind response body: %w", err)
	}

	return &ReqResponse{
		Response: resp,
	}, nil
}

// GetOther makes the request to the API endpoint.
func (c *Client) GetOther(ctx context.Context, opts ...func(*http.Request) error) error {

	// Create the request
	req, err := http.NewRequestWithContext(
		ctx,
		"GET",
		c.BaseURL,
		nil,
	)
	if err != nil {
		return fmt.Errorf("failed to build request: %w", err)
	}

	// Apply any request editors
	for _, fn := range c.reqEditors {
		if err := fn(req); err != nil {
			return fmt.Errorf("failed to apply request editor: %w", err)
		}
	}

	// Do the request
	_, errDo := c.client.Do(req)
	if errDo != nil {
		return fmt.Errorf("failed to send request: %w", errDo)
	}

	return nil
}

// GetJSONWithTrailingSlash makes the request to the API endpoint.
func (c *Client) GetJSONWithTrailingSlash(ctx context.Context, opts ...func(*http.Request) error) error {

	// Create the request
	req, err := http.NewRequestWithContext(
		ctx,
		"GET",
		c.BaseURL,
		nil,
	)
	if err != nil {
		return fmt.Errorf("failed to build request: %w", err)
	}

	// Apply any request editors
	for _, fn := range c.reqEditors {
		if err := fn(req); err != nil {
			return fmt.Errorf("failed to apply request editor: %w", err)
		}
	}

	// Do the request
	_, errDo := c.client.Do(req)
	if errDo != nil {
		return fmt.Errorf("failed to send request: %w", errDo)
	}

	return nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /with_both_bodies)
	PostBoth(w http.ResponseWriter, r *http.Request)

	// (GET /with_both_responses)
	GetBoth(w http.ResponseWriter, r *http.Request)

	// (POST /with_json_body)
	PostJSON(w http.ResponseWriter, r *http.Request)

	// (GET /with_json_response)
	GetJSON(w http.ResponseWriter, r *http.Request)

	// (POST /with_other_body)
	PostOther(w http.ResponseWriter, r *http.Request)

	// (GET /with_other_response)
	GetOther(w http.ResponseWriter, r *http.Request)

	// (GET /with_trailing_slash/)
	GetJSONWithTrailingSlash(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	Middlewares      map[string]func(http.Handler) http.Handler
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// PostBoth operation middleware
func (siw *ServerInterfaceWrapper) PostBoth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostBoth(w, r)
	})

	handler(w, r.WithContext(ctx))
}

// GetBoth operation middleware
func (siw *ServerInterfaceWrapper) GetBoth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBoth(w, r)
	})

	handler(w, r.WithContext(ctx))
}

// PostJSON operation middleware
func (siw *ServerInterfaceWrapper) PostJSON(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostJSON(w, r)
	})

	handler(w, r.WithContext(ctx))
}

// GetJSON operation middleware
func (siw *ServerInterfaceWrapper) GetJSON(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, OpenIDScopes, []string{"json.read", "json.admin"})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJSON(w, r)
	})

	handler(w, r.WithContext(ctx))
}

// PostOther operation middleware
func (siw *ServerInterfaceWrapper) PostOther(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostOther(w, r)
	})

	handler(w, r.WithContext(ctx))
}

// GetOther operation middleware
func (siw *ServerInterfaceWrapper) GetOther(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOther(w, r)
	})

	handler(w, r.WithContext(ctx))
}

// GetJSONWithTrailingSlash operation middleware
func (siw *ServerInterfaceWrapper) GetJSONWithTrailingSlash(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, OpenIDScopes, []string{"json.read", "json.admin"})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJSONWithTrailingSlash(w, r)
	})

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	error
}
type UnmarshalingParamError struct {
	error
}
type RequiredParamError struct {
	error
}
type RequiredHeaderError struct {
	error
}
type InvalidParamFormatError struct {
	error
}
type TooManyValuesForParamError struct {
	error
}

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      map[string]func(http.Handler) http.Handler
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:     "/",
		BaseRouter:  chi.NewRouter(),
		Middlewares: make(map[string]func(http.Handler) http.Handler),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		Middlewares:      options.Middlewares,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Post("/with_both_bodies", wrapper.PostBoth)
		r.Get("/with_both_responses", wrapper.GetBoth)
		r.Post("/with_json_body", wrapper.PostJSON)
		r.Get("/with_json_response", wrapper.GetJSON)
		r.Post("/with_other_body", wrapper.PostOther)
		r.Get("/with_other_response", wrapper.GetOther)
		r.Get("/with_trailing_slash/", wrapper.GetJSONWithTrailingSlash)

	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithMiddleware(key string, middleware func(http.Handler) http.Handler) ServerOption {
	return func(s *ServerOptions) {
		s.Middlewares[key] = middleware
	}
}

func WithMiddlewares(middlewares map[string]func(http.Handler) http.Handler) ServerOption {
	return func(s *ServerOptions) {
		s.Middlewares = middlewares
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8yUz24TMRDGX2U1cFyyKdz2CAdUJBpEInEIUeV4J7GrXdvMTFqton13NE5KElGFIEHV",
	"SzTO/NE338/rLdjYpRgwCEO9BbYOO5PDaQ4nyzu0oudEMSGJx5xdeWK5MR3qQfqEUAML+bCGoQSK7VMJ",
	"zeCPjSdsoJ7vqsqjUYtBS3xYRW1ukC35JD4GqGHmPBeCLFw8OBSHVIjD4kPrMUhhQrMPv3lxX5FTDIxc",
	"GMJijQHJCDaFjURope2/Byih9RYDZ50hLwKfr2eqXryofJghSzFFukeCEu6ReCflajQejbUwJgwmeajh",
	"3Wg8uoISkhGX/akevLjbZcw/zd60FDlbqUYa3eu6gRq+RJb3URzs3EE9Nb3W2RgEQ24xKbXe5qbqjlXG",
	"IyyNXhOuoIZX1YFmtUdZnXBUf49HRSsob1gITXc6chWpMwI1LH0w1EP5G8wTmkIbzH/snYc6bNpWa46c",
	"OMpuYY1PePERD1Yc1b4dj1+qCcNhR5WktPvzrD9NJzfPw/qvCGX1j9lzgH7p/4+AVBaj3ZCXHur5FiYJ",
	"s4A56NwRoWmg3MWm6XyAxbA47BL1fbgAxUTrLmbxbB/LTv4lLA4LnIfxr664kPGtD+tbbg276k/XRB/j",
	"2b5lqh0v9N4Mw88AAAD//1BYVOcJBwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
